<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	<!-- javamelody -->
	<bean id="facadeMonitoringAdvisor" class="net.bull.javamelody.MonitoringSpringAdvisor">  
	    <property name="pointcut">  
	        <bean class="org.springframework.aop.support.JdkRegexpMethodPointcut">  
	            <property name="pattern" value=".*ServiceImpl.*" />  
	        </bean>  
	    </property>  
	</bean>
		
		
    <!--加载属性配置文件 -->
    <bean id="envPropertyLocator"
          class="com.tydic.framework.base.config.PropertyWeblogicConfigurer">
        <property name="fileEncoding" value="UTF-8"/>
        <property name="locations">
            <list>
                <value>classpath:config/*/api.properties</value>
                <value>classpath:config/*/cas.properties</value>
                <value>classpath:config/*/bcp.properties</value>
                <value>classpath:config/*/jdbc.properties</value>
                <value>classpath:config/*/hisense.properties</value>
                <!--订单同步配置文件 -->
                <value>classpath:sync-order.properties</value>
                <value>classpath:xmo2o.properties</value>
                <value>classpath:couponActivity.properties</value>
                <value>classpath:config/*/oms.properties</value>
                 <!--支付中心配置文件 -->
                <value>classpath:config/*/payCenter.properties</value>
                <!--solr搜索配置文件 -->
                <value>classpath:config/*/solr.properties</value>
               	<!--短信配置文件 -->
                <value>classpath:config/*/sms.properties</value>
            </list>
        </property>
    </bean>
     <mvc:annotation-driven />
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="com.iskyshop.core.colony.DbTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 启用支持Annotation注解方式的事务管理 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 把标记了@Controller等注解的类转换为bean -->
    <context:component-scan base-package="com.iskyshop.*,com.smilife.*"/>
    <bean id="quartzinitsql" class="com.iskyshop.quartz.QuartzSqls"
          scope="singleton" init-method="init">
    </bean>
    <!--拦截器 -->
    <mvc:interceptors>
        <!-- 微信端自动进入登陆状态拦截器 -->
        <!-- <mvc:interceptor> <mvc:mapping path="/wap/*.htm" /> <bean class="com.iskyshop.module.weixin.interceptor.LoginInterceptor"></bean>
            </mvc:interceptor> -->
        <!-- 拦截非法请求向微信接口发送消息 -->
        <mvc:interceptor>
            <mvc:mapping path="/weixin_develop_action.htm"/>
            <bean class="com.iskyshop.module.weixin.interceptor.WeixinInterceptor"></bean>
        </mvc:interceptor>
        <!-- app买家拦截器 -->
        <mvc:interceptor>
            <mvc:mapping path="/app/buyer/*.htm"/>
            <bean class="com.iskyshop.module.app.view.tools.AppBuyerInterceptor"></bean>
        </mvc:interceptor>
        <!-- app商家拦截器 -->
        <mvc:interceptor>
            <mvc:mapping path="/app/seller/*.htm"/>
            <bean class="com.iskyshop.module.app.view.tools.AppSellerInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"
        /> -->
    <!--文件上传设置 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <value>20971520</value>
            <!-- 文件上传最大为20M -->
        </property>
        <property name="maxInMemorySize" value="4096"/>
    </bean>
    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <bean id="velocityCongfig"
          class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath">
            <value>/</value>
        </property>
        <property name="velocityProperties">
            <props>
                <prop key="directive.set.null.allowed">true</prop>
                <prop key="input.encoding">UTF-8</prop>
                <prop key="output.encoding ">UTF-8</prop>
            </props>
        </property>
    </bean>
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.velocity.VelocityView"/>
        <property name="contentType">
            <value>text/html;charset=UTF-8</value>
        </property>
    </bean>
    <!-- property-placeholder是一个属性遍历器，定位一个属性文件，属性文件存放的是jdbc一些连接数据 -->
    <!--<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />-->
    <!--配置velocity engine默认路径 -->
    <bean id="velocityEngine"
          class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="resourceLoaderPath" value="/velocity/"></property>
    </bean>
    <!-- 配置主数据源 写+读 -->
    <bean id="master_dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${master_driverClassName}"/>
        <property name="url" value="${master_url}"/>
        <property name="username" value="${master_username}"/>
        <property name="password" value="${master_password}"/>
        <property name="initialSize" value="${master_initialSize}"/>
        <property name="maxActive" value="${master_maxActive}"/>
        <property name="maxIdle" value="${master_maxIdle}"/>
        <property name="minIdle" value="${master_minIdle}"/>
    </bean>
    <!-- 配置从数据源 读数据 -->
    <bean id="slave_dataSourdce" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${slave_driverClassName}"/>
        <property name="url" value="${slave_url}"/>
        <property name="username" value="${slave_username}"/>
        <property name="password" value="${slave_password}"/>
        <property name="initialSize" value="${slave_initialSize}"/>
        <property name="maxActive" value="${slave_maxActive}"/>
        <property name="maxIdle" value="${slave_maxIdle}"/>
        <property name="minIdle" value="${slave_minIdle}"/>
    </bean>
    <!--动态选择数据源 -->
    <bean id="dataSource" class="com.iskyshop.core.colony.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="master" value-ref="master_dataSource"/>
                <entry key="slave" value-ref="slave_dataSourdce"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="slave_dataSourdce"/>
    </bean>
    <bean name="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- <property name="persistenceXmlLocation" value="classpath:persistence.xml"/> -->
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="MYSQL"/>
                <property name="showSql" value="false"/>
                <property name="generateDdl" value="true"/>
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
            	<prop key="hibernate.hbm2ddl.auto">update</prop>
                <!-- 二级缓存配置 -->
                <prop key="hibernate.cache.provider_class">
                    net.sf.ehcache.hibernate.SingletonEhCacheProvider
                </prop>
                <prop key="hibernate.cache.provider_configuration">
					/ehcache.xml
				</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.use_sql_comments">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.generate_statistics">true</prop>
                <prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.iskyshop</value>
            </list>
        </property>

    </bean>
    <!-- 定义了与实体相关的dao -->
    <!-- <bean id="genericEntityDao" class="com.iskyshop.core.base.GenericEntityDao"
          scope="singleton" lazy-init="false">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean> -->
    <!--使用泛型DAO作为抽象基类 abstract="true" -->
   <!--  <bean id="genericDAO" class="com.iskyshop.core.base.GenericDAO"
          abstract="true" depends-on="genericEntityDao">
        <property name="geDao">
            <ref bean="genericEntityDao"/>
        </property>
    </bean> -->
    <!-- 系统调度控制器 -->
    <bean id="statTask" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass">
            <value>com.iskyshop.quartz.StatDetailQuartzJobBean</value>
        </property>
    </bean>
    <bean id="stat_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="statTask"/>
        <!--半小时执行一次-->
        <property name="cronExpression" value="0 */30 * * * ?"/>
    </bean>
    <bean id="jobTask" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass">
            <value>com.iskyshop.quartz.JobDetailQuartzJobBean</value>
        </property>
    </bean>
    <bean id="job_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="jobTask"/>
        <!--每天凌晨1点-->
        <property name="cronExpression" value="0 0 1 * * ?"/>
    </bean>
    <!--订单是否超过时效检查  定时器-->
    <bean id="orderTask" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass">
            <value>com.iskyshop.quartz.OrderValidCheckQuartzJobBean</value>
        </property>
    </bean>
    <bean id="order_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="orderTask"/>
        <!--五分钟执行一次-->
        <property name="cronExpression" value="0 */5 * * * ?"/>
    </bean>
    
    <!-- 同步订单检查定时器——开始 -->
    <bean id="syncOrderTask" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass">
            <value>com.iskyshop.quartz.SynchronizeOrderQuartzJobBean</value>
        </property>
    </bean>
    <bean id="syncOrder_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="syncOrderTask" />
        <!-- 一分钟执行一次 -->
        <property name="cronExpression" value="0 */1 * * * ?" />
    </bean>
  <!-- 同步订单检查定时器——结束 -->
        
    <!-- 订单中心待同步订单定时器 -->
    	<bean id="waitsynOrderTask" class="org.springframework.scheduling.quartz.JobDetailBean">
	       <property name="jobClass">
	            <value>com.iskyshop.quartz.WaitSynOrderQuartzJobBean</value>
	       </property>
    	</bean>
	    <bean id="waitsynOrder_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
	        <property name="jobDetail" ref="waitsynOrderTask" />
	        <!-- 三分钟执行一次 -->
	        <property name="cronExpression" value="0 */3 * * * ?" />
	    </bean>
    <!--  订单中心待同步订单定时器结束 -->

    <!--海信库存同步定时器 -->
    <bean id="hisenseInventoryTask" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass">
            <value>com.iskyshop.quartz.HisenseInventoryQuartzJobBean</value>
        </property>
    </bean>
    <bean id="hisenseInventory_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="hisenseInventoryTask" />
        <property name="cronExpression" value="0 */15 * * * ?" />
    </bean>


    <!--秒杀商品时效检查  定时器-->
    <!-- <bean id="seckillGoodsTask" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass">
            <value>com.iskyshop.quartz.SeckillGoodsQuartzJobBean</value>
        </property>
    </bean>
    <bean id="seckillGoods_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="seckillGoodsTask"/>
        <property name="cronExpression" value="* */1 * * * ?"/>
    </bean> -->
    <!--<bean id="schdulerFactory" lazy-init="false"-->
    <!--class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
    <bean id="schdulerFactory" lazy-init="false"
          class="com.smilife.core.quartz.SmiSchedulerFactoryBean">
        <property name="configLocation" value="classpath:config/*/quartz.properties" />
        <property name="triggers">
            <list>
                <ref bean="stat_cronTrigger" />
                <ref bean="job_cronTrigger" />
                <ref bean="order_cronTrigger" />
                <ref bean="syncOrder_cronTrigger" />
                <ref bean="hisenseInventory_cronTrigger" />
                <ref bean="waitsynOrder_cronTrigger" />
            </list>
        </property>
        <property name="applicationContextSchedulerContextKey" value="applicationContext" />
        <property name="overwriteExistingJobs" value="true" />
        <property name="jobFactory">
            <bean class="com.iskyshop.quartz.AutoWiringSpringBeanJobFactory" />
        </property>
      <!-- <property name="exposeSchedulerInRepository" value="true" /> -->
    </bean>
    
    <!-- 处理JSON请求 -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1" />
        <!-- <property name="defaultContentType" value="application/json;charset=UTF-8"/> -->
        <property name="mediaTypes">
            <map>
                <entry key="html" value="text/html"/>
                <entry key="json" value="application/json" />
                <entry key="xml" value="application/xml" />
                <entry key="jsonp" value="application/javascript"/>  
            </map>
        </property>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" ></bean>
            </list>
        </property>
        <property name="ignoreAcceptHeader" value="true" />
    </bean>
</beans>